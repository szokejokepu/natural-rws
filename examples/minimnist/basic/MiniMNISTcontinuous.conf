# add here few words about what is the purpose of this experiment
# keep only one experiment per file

##############################################################
[
{
"dataName" : "miniMNIST",
"binary" : 0,
# "data_dir": "temp/datasets/",
# "dataAugmentation" : [[("sample_from_bernoulli", {}, 1.0)
#                        ]],

# "dataPerturbation" : [[("salt_and_pepper", {"delta" : 1.0, "prob" : 0.2, "clip" : 1}, 0.5)
#                       ]],
#
# "stochastic" : 1,
#"flip_fraction" : 0.,
"pm_one": True,
#"vect" : False  # False if starting with convolutional, True will give the dataset already vectorialized (reshaped -1)
},
{

"model" : ["HM2.HM"],
"grad_clipping" : (None, {}),
"pm_one": True,
"clip_probs": 1e-6,
"note" : "basic",

"denoising" : [0],

"optimizer": [
           	(opt, {"learning_rate" : lr,
           			  "individual_learning_rate": 1.0,
           			  "rescale_learning_rate": 1.0,
           			  "diagonal_pad": dp,
           			  "q_baseline":True,
           			  "natural_reg": nr,
					  "post_optimizer": po,
					  "simple_alter": sa,
           			  "k_step_update": 100})
	    for sa in [False, True][0:1]
        for lr in [0.0001, 0.002, 0.005][0:1]
	    for nr in [0.0, 0.0001, 0.001, 0.01, 0.1, 1.0][0:1]
	    for dp in [0.01, 0.05, 101.0][0:1]
#        for lr in [0.01, 0.001, 0.0001, 0.05, 0.005, 0.0005, 0.02, 0.002, 0.0002][0:9]
		for opt in ["AccurateNaturalReweightedWakeSleepOptimizer2",
                    "WakeSleepOptimizer2",
                    "BidirectionalHMOptimizer2",
                    "ReweightedWakeSleepOptimizer2",
                    "NaturalWakeSleepOptimizer2"][0:2]
		for po in ["GD","Nadam"][0:1]
              ],

"cost_function": [("HMLogJointLikelihoodBIHM", {}),("HMLogJointLikelihoodRWS2", {})][1:2],

"batch_size_train" : 32,
"batch_size_eval" : [i for i in [100]],

"samples" : [1,3,5,10][1:2], # 1 or more
#"samples" : [{0:10, 2000:50}][0:1], # 1 or more
"covariance_parameterization" : "softplus", # "exp" or "softplus"

"network_architecture" : [{
            "layers": ll,
            "automatic_diff": ad
        } for ll in [
                     [("Dense", {"size_top": 100}),
                     ("Dense", {"size_top": 50}),
                     ("Dense", {"size_top": 20}),
                     ("Dense", {"size_top": 10}),
                     ("Dense", {"size_top": 10})],
                  ][0:1]

        for ad in [True, False][0:1]
        #} for ll in [[200,200,100,75,50,35,30,25,20,15,10,10]]
        #} for ll in [[300,200,100,75,50,35,30,25,20,15,10,10]]
	],

#"weights_reg" : [("contrib.layers.l1_regularizer", {"scale" : 0.002})],
#"bias_reg" : [("contrib.layers.l1_regularizer",    {"scale" : 0.002})],

"weights_reg" : [None],
"bias_reg" :    [None],
#"weights_init": [i for i in [("glorot_normal_initializer",{})]],
#"weights_init": [i for i in [("truncated_normal_initializer",{"mean":0.0,"stddev": 0.1})]],

#"weights_init" : [("constant_initializer", {'value' : 0.1})],  # !!! truncated normal
#"weights_init" : [("glorot_normal_initializer",{})],  # !!! truncated normal
#"bias_init" : [("constant_initializer", {'value' : 0.1})],

"weights_init" : [("glorot_uniform_initializer",{})],  # !!! truncated normal
"bias_init" : [("constant_initializer", {'value' : -1.0})],

"activation" : ["elu"],
"epochs" : 101  ,

},
{
"check_ops" : 0,

# choose steps or epochs
"time_reference" : "epochs",
#"time_reference" : "steps",

# choose to save the model every n steps
"save_model" : 1,
"save_model_period" : 20, #0.1,

# how often to log stats (txt) and save summaries
"save_summaries" : 0,
"save_summaries_period" : 10,
"stats_period" : 1,

# skips the first k stats for the plot
"plot_offset" : 1,



"GradientsHook" : {"period" : 1},

"ImagesInputHook" : {"period" : 1,
                     "how_many" : 20,
                     "n_images_columns" : 20,
					 "until": 1},

"ImagesReconstructHook" : {"period" : 20,
                           "n_images_columns" : 16,
                           "images_indexes" : {
                                                 "train" : [0,10,20,30,40,50,110,120,130,140,150,210,220,230,240,250],
                                                 "validation" : [0,10,20,30,40,50,110,120,130,140,150,210,220,230,240,250],
                                                 },
                            },

"ImagesGenerateHook" : {"period" : 20,
                        "n_images_columns" : 10,
                        "n_gen_samples" : 100
                       },

#"TwoDimPCALatentVariablesHook" : {"period" : 10,
#                                  },
#
#"PCALatentVariablesHook" : {"period" : 10,
#                             },
#
#
"LogpImportanceSamplingHook" : [{"period" : 100,
                                "n_samples" : [1, 10, 100, 1000],
                                "batch_size" : 200,
                                "repetitions" : 1
                       	       },{"period" : 101,
                                "n_samples" : [10000],
                                "batch_size" : 20,
                                "repetitions" : 1
	                       	   }],

"dirName" : "save_path/miniMNIST/basic",

"seed" : 0,
"runs" : 1,

"nodes" : [{"used_GPUs" : {2},
            "cores_per_GPU" : 4,

	    "IP": "localhost"   #  num_consumers = multiprocessing.cpu_count() * 2
	   }
	   ],

}
]
