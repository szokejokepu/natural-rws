# add here few words about what is the purpose of this experiment
# keep only one experiment per file

##############################################################
[
{
"dataName" : "ThreeByThreeLines",
"binary" : 1,
"flip_fraction" : 0.,
"pm_one": False,
"vect" : False  # False if starting with convolutional, True will give the dataset already vectorialized (reshaped -1)
},
{

"model" : ["HM2.HM"],
#"grad_clipping" : ("clip_by_norm", {"value" : 500}),
"grad_clipping" : (None, {}),
"pm_one": False ,
"clip_probs": 1e-6,
#"grad_clipping" : [x for x in [("clip_by_global_norm", {"value" : 100}),("clip_by_global_norm", {"value" : 10}), ("clip_by_value", {"value" : 10}), ("clip_by_norm", {"value" : 10}) ]],
"note" : "testyNew3",

"denoising" : [0],
"optimizer": [(opt, {"learning_rate" : 0.01,
# "optimizer": [("AccurateNaturalReweightedWakeSleepOptimizer", {"learning_rate" : 0.005,
           			  "individual_learning_rate": 1.0,
           			  "rescale_learning_rate": 1.0,
           			  "diagonal_pad": dp,
           			  "q_baseline":True,
           			  "natural_reg": 0.0,
					  "post_optimizer": po,
          			  "k_step_update": k})
          			  for opt in ["BidirectionalHMOptimizer2",
                                  "ReweightedWakeSleepOptimizer2",
                                  "WakeSleepOptimizer2",
                                  "AccurateNaturalReweightedWakeSleepOptimizer2",
          			              "NaturalWakeSleepOptimizer2"][2:4]
          			  for k in [100,1000][0:1]
          			  for dp in [0.1,0.01][0:1]
          			  for po in ["GD","Nadam"][0:1]
             ],

"cost_function": [("HMLogJointLikelihoodBIHM2", {}),("HMLogJointLikelihoodRWS2", {})][1:2],

"batch_size_train" : [s for s in [32]],
"batch_size_eval" : [s for s in [32]],

"samples" : [s for s in [10]], # 1 or more
"covariance_parameterization" : "softplus", # "exp" or "softplus"


"network_architecture" : [{
            "layers": ll,
            "automatic_diff": ad
        } for ll in [[("Dense", {"size_top": 6}),
                     ("Dense", {"size_top": 1})]][0:2]
        for ad in [True, False][0:1]
	],

#"weights_reg" : [("contrib.layers.l1_regularizer", {"scale" : 0.001})],
#"bias_reg" : [("contrib.layers.l1_regularizer",    {"scale" : 0.001})],

"weights_reg" : [None],
"bias_reg" :    [None],

"weights_init" : [("glorot_normal_initializer",{})],  # !!! truncated normal
#"weights_init" : [i for i in [("glorot_normal_initializer",{}),("constant_initializer", {'value' : 0.1})]],  # !!! truncated normal
"bias_init" : [("constant_initializer", {'value' : 0.1})],

#"weights_init" : [("constant_initializer", {'value' : 0.01})],
#"bias_init" : [("constant_initializer", {'value' : 0.1})],

"activation" : ["elu"],
"epochs" : 100,

},
{
"check_ops" : 0,

# choose steps or epochs
"time_reference" : "epochs",
#"time_reference" : "steps",

# choose to save the model every n steps
"save_model" : 1,
"save_model_period" : 10, #0.1,

# how often to log stats (txt) and save summaries
"save_summaries" : 0,
"save_summaries_period": 5,
"stats_period" : 1,

# skips the first k stats for the plot
"plot_offset" : 1,



"GradientsHook" : {"period" : 1},

"ImagesInputHook" : {"period" : 1,
                     "how_many" : 20,
                     "n_images_columns" : 20,
                     "until": 1},

"ImagesReconstructHook" : {"period" : 5,
                           "n_images_columns" : 16,
                           "images_indexes" : {
                                                 "train" : [0,10,20,30,40,50,110,120,130,140,150,210,220,230,240,250],
                                                 "validation" : [0,10,20,30,40,50,110,120,130,140,150,210,220,230,240,250],
                                                 },
                            },

"ImagesGenerateHook" : {"period" : 5,
                        "n_images_columns" : 10,
                        "n_gen_samples" : 100
                       },

"ThreeByThreeHook": {"period" : 1,
		             "sample_size": 10000},


"MutualInformationHook": {"period" : 1},



"LogpImportanceSamplingHook" : {"period" : 5,
                                "n_samples" : [100],
                                "batch_size" : 1000,
                                "repetitions" : 1
                       	       },


#"dirName" : "/ssd_data/csongor_test/natural_test",
"dirName" : "save_path/3by3/basic",

"seed" : 0,
"runs" : 1,

"nodes" : [{"used_GPUs" : {0},
            "cores_per_GPU" : 6,

	    "IP": "localhost"   #  num_consumers = multiprocessing.cpu_count() * 2
	   }
	   ],

}
]
