# add here few words about what is the purpose of this experiment
# keep only one experiment per file

##############################################################
[
{
"dataName" : "MNIST",
"binary" : 1,
#"dataAugmentation" : [[("sample_from_bernoulli", {}, 1.0)
#                      ]],

# "dataPerturbation" : [[("salt_and_pepper", {"delta" : 1.0, "prob" : 0.2, "clip" : 1}, 0.5)
#                       ]],
#
# "stochastic" : 1,
#"flip_fraction" : 0.,
"pm_one": True,
#"vect" : False  # False if starting with convolutional, True will give the dataset already vectorialized (reshaped -1)
},
{

"model" : ["HM2.HM"],
#"grad_clipping" : ("clip_by_norm", {"value" : 500}),
"grad_clipping" : (None, {}),
"pm_one": True ,
"clip_probs": 1e-6,
#"grad_clipping" : [x for x in [("clip_by_global_norm", {"value" : 100}),("clip_by_global_norm", {"value" : 10}), ("clip_by_value", {"value" : 10}), ("clip_by_norm", {"value" : 10}) ]],
"note" : "DNRWSTRY2",

"denoising" : [0],
"optimizer": [("WakeSleepOptimizer2", {"learning_rate" : 0.002,
           			  "individual_learning_rate": 1.0,
           			  "rescale_learning_rate": 1.0,
           			  "diagonal_pad": 0.2,
           			  "q_baseline":True,
           			  "natural_reg": 0.0,
			 	      "post_optimizer": None,
           			  "k_step_update": 1000}),
              ("ReweightedWakeSleepOptimizer2", {"learning_rate" : 0.002,
           			  "individual_learning_rate": 1.0,
           			  "rescale_learning_rate": 1.0,
           			  "diagonal_pad": 0.2,
           			  "q_baseline":True,
           			  "natural_reg": 0.0,
			 	      "post_optimizer": None,
           			  "k_step_update": 1000}),
              ("ReweightedWakeSleepOptimizer2", {"learning_rate" : 0.005,
           			  "individual_learning_rate": 1.0,
           			  "rescale_learning_rate": 1.0,
           			  "diagonal_pad": 0.2,
           			  "q_baseline":True,
           			  "natural_reg": 0.0,
			 	      "post_optimizer": None,
           			  "k_step_update": 1000}),
              ("AccurateNaturalReweightedWakeSleepOptimizer2", {"learning_rate" : 0.002,
           			  "individual_learning_rate": 1.0,
           			  "rescale_learning_rate": 1.0,
           			  "diagonal_pad": 0.2,
           			  "q_baseline":True,
           			  "natural_reg": 0.0,
			 	  "post_optimizer": None,
           			  "k_step_update": 1000}),
              ("DiagonalNaturalReweightedWakeSleepOptimizer2", {"learning_rate" : 0.002,
           			  "individual_learning_rate": 1.0,
           			  "rescale_learning_rate": 1.0,
           			  "diagonal_pad": 0.2,
           			  "q_baseline":True,
           			  "natural_reg": 0.0,
			 	      "post_optimizer": None,
           			  "k_step_update": 1000}),

              ("ReweightedWakeSleepOptimizer2", {"learning_rate" : 0.001,
           			  "individual_learning_rate": 1.0,
           			  "rescale_learning_rate": 1.0,
           			  "diagonal_pad": 0.2,
           			  "q_baseline":True,
           			  "natural_reg": 0.0,
			 	      "post_optimizer": "Nadam",
           			  "k_step_update": 1000}),
              ("ReweightedWakeSleepOptimizer2", {"learning_rate" : 0.002,
           			  "individual_learning_rate": 1.0,
           			  "rescale_learning_rate": 1.0,
           			  "diagonal_pad": 0.2,
           			  "q_baseline":True,
           			  "natural_reg": 0.0,
			 	      "post_optimizer": "Nadam",
           			  "k_step_update": 1000}),
              ("AccurateNaturalReweightedWakeSleepOptimizer2", {"learning_rate" : 0.001,
           			  "individual_learning_rate": 1.0,
           			  "rescale_learning_rate": 1.0,
           			  "diagonal_pad": 0.2,
           			  "q_baseline":True,
           			  "natural_reg": 0.0,
			 	      "post_optimizer": "Nadam",
           			  "k_step_update": 1000}),
              ("ReweightedWakeSleepOptimizer2", {"learning_rate" : 0.0005,
           			  "individual_learning_rate": 1.0,
           			  "rescale_learning_rate": 1.0,
           			  "diagonal_pad": 0.2,
           			  "q_baseline":True,
           			  "natural_reg": 0.0,
			 	      "post_optimizer": "Nadam",
           			  "k_step_update": 1000}),
              ("AccurateNaturalReweightedWakeSleepOptimizer2", {"learning_rate" : 0.0005,
           			  "individual_learning_rate": 1.0,
           			  "rescale_learning_rate": 1.0,
           			  "diagonal_pad": 0.2,
           			  "q_baseline":True,
           			  "natural_reg": 0.0,
			 	      "post_optimizer": "Nadam",
           			  "k_step_update": 1000}),
              ("AccurateNaturalReweightedWakeSleepOptimizer2", {"learning_rate" : 0.005,
           			  "individual_learning_rate": 1.0,
           			  "rescale_learning_rate": 1.0,
           			  "diagonal_pad": 0.2,
           			  "q_baseline":True,
           			  "natural_reg": 0.0,
			 	      "post_optimizer": None,
           			  "k_step_update": 1000}),
              ("DiagonalNaturalReweightedWakeSleepOptimizer2", {"learning_rate" : 0.005,
           			  "individual_learning_rate": 1.0,
           			  "rescale_learning_rate": 1.0,
           			  "diagonal_pad": 0.2,
           			  "q_baseline":True,
           			  "natural_reg": 0.0,
			 	      "post_optimizer": None,
           			  "k_step_update": 1000}),
             ][0:1],

"cost_function": [("HMLogJointLikelihoodBIHM2", {}),("HMLogJointLikelihoodRWS2", {})][1:2],

"batch_size_train" : 32,
"batch_size_eval" : [i for i in [100]],

"samples" : [1,3,5,10][3:4], # 1 or more
#"samples" : [{0:10, 2000:50}][0:1], # 1 or more
"covariance_parameterization" : "softplus", # "exp" or "softplus"

"network_architecture" : [{
            "layers": ll,
            "automatic_diff": ad
        } for ll in [[("Dense", {"size_top": 300}),
                     ("Dense", {"size_top": 200}),
                     ("Dense", {"size_top": 100}),
                     ("Dense", {"size_top": 75}),
                     ("Dense", {"size_top": 50}),
                     ("Dense", {"size_top": 35}),
                     ("Dense", {"size_top": 25}),
                     ("Dense", {"size_top": 20}),
                     ("Dense", {"size_top": 15}),
                     ("Dense", {"size_top": 10}),
                     ("Dense", {"size_top": 10})]][0:1]

        for ad in [True, False][0:1]
        #} for ll in [[200,200,100,75,50,35,30,25,20,15,10,10]]
        #} for ll in [[300,200,100,75,50,35,30,25,20,15,10,10]]
	],

#"weights_reg" : [("contrib.layers.l1_regularizer", {"scale" : 0.002})],
#"bias_reg" : [("contrib.layers.l1_regularizer",    {"scale" : 0.002})],

"weights_reg" : [None],
"bias_reg" :    [None],
#"weights_init": [i for i in [("glorot_normal_initializer",{})]],
#"weights_init": [i for i in [("truncated_normal_initializer",{"mean":0.0,"stddev": 0.1})]],

#"weights_init" : [("constant_initializer", {'value' : 0.1})],  # !!! truncated normal
#"weights_init" : [("glorot_normal_initializer",{})],  # !!! truncated normal
#"bias_init" : [("constant_initializer", {'value' : 0.1})],

"weights_init" : [("glorot_normal_initializer",{})],  # !!! truncated normal
"bias_init" : [("constant_initializer", {'value' : -1.0})],

"activation" : ["elu"],
"epochs" : 2005,

},
{
"check_ops" : 0,

# choose steps or epochs
"time_reference" : "epochs",
#"time_reference" : "steps",

# choose to save the model every n steps
"save_model" : 1,
"save_model_period" : 50, #0.1,

# how often to log stats (txt) and save summaries
"save_summaries" : 0,
"save_summaries_period" : 50,
"stats_period" : 1,

# skips the first k stats for the plot
"plot_offset" : 1,



# "GradientsHook" : {"period" : 1},

"ImagesInputHook" : {"period" : 1,
                     "how_many" : 20,
                     "n_images_columns" : 20,
					 "until": 1},

"ImagesReconstructHook" : {"period" : 100,
                           "n_images_columns" : 16,
                           "images_indexes" : {
                                                 "train" : [0,10,20,30,40,50,110,120,130,140,150,210,220,230,240,250],
                                                 "validation" : [0,10,20,30,40,50,110,120,130,140,150,210,220,230,240,250],
                                                 },
                            },

"ImagesGenerateHook" : {"period" : 100,
                        "n_images_columns" : 10,
                        "n_gen_samples" : 100
                       },

#"TwoDimPCALatentVariablesHook" : {"period" : 10,
#                                  },
#
#"PCALatentVariablesHook" : {"period" : 10,
#                             },
#
#
"LogpImportanceSamplingHook" : [{"period" : 100,
                                "n_samples" : [1, 10, 100, 1000],
                                "batch_size" : 200,
                                "repetitions" : 1
                       	       },{"period" : 500,
                                "n_samples" : [10000],
                                "batch_size" : 20,
                                "repetitions" : 1
	                       	   }],

#"dirName" : "/data1/csongor/MNIST/SoaNewLong4",
"dirName" : "save_path/MNIST/Journal2",
#"dirName" : "temp",

"seed" : 0,
"runs" : 1,

"nodes" : [{"used_GPUs" : {1},
            "cores_per_GPU" : 1,
            "IP": "localhost"   #  num_consumers = multiprocessing.cpu_count() * 2
           }],
}]
